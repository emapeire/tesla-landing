---
import TeslaLogo from "./Icon/TeslaLogo.astro";
import SupportIcon from "./Icon/SupportIcon.astro";
import RegionIcon from "./Icon/RegionIcon.astro";
import SignInIcon from "./Icon/SignInIcon.astro";
---

<header
  id="landing-header"
  class="py-[10px] px-[50px] flex items-center align-middle fixed top-0 w-full justify-between text-current transition-colors duration-500 z-40 opacity-0 ease-in-out"
>
  <div class="flex flex-grow basis-0">
    <a href="#">
      <TeslaLogo />
    </a>
  </div>
  <nav>
    <ul
      class="flex text-sm [&>li>a]:font-medium [&>li>a]:inline-block [&>li>a]:align-middle [&>li>a]:px-4 [&>li>a]:py-2"
    >
      <li><a href="#">Vehicles</a></li>
      <li><a href="#">Energy</a></li>
      <li><a href="#">Charging</a></li>
      <li><a href="#">Discover</a></li>
      <li><a href="#">Shop</a></li>
    </ul>
  </nav>
  <nav class="hidden lg:flex flex-grow basis-0 justify-end">
    <ul
      class="flex [&>li>a]:inline-block [&>li>a]:align-middle [&>li>a]:px-2 [&>li>a]:py-2"
    >
      <li>
        <a href="#">
          <SupportIcon />
        </a>
      </li>
      <li>
        <a href="#">
          <RegionIcon />
        </a>
      </li>
      <li>
        <a href="#">
          <SignInIcon />
        </a>
      </li>
    </ul>
  </nav>
  <nav class="lg:hidden flex flex-grow basis-0 justify-end">
    <ul
      class="flex text-sm [&>li>a]:font-medium [&>li>a]:inline-block [&>li>a]:align-middle [&>li>a]:px-2 [&>li>a]:py-2"
    >
      <li>
        <a href="#">Menu</a>
      </li>
    </ul>
  </nav>
</header>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const landingHeaderElement = document.querySelector("#landing-header");

    const applyTransition = (element) => {
      setTimeout(() => {
        element.style.opacity = "100";
      }, 250);
    };

    applyTransition(landingHeaderElement);
  });
</script>

<script>
  const landingHeaderElement = document.querySelector(
    "#landing-header"
  ) as HTMLElement;

  const landingHeaderObserverOptions = {
    root: null,
    rootMargin: "0px",
    threshold: 0.8,
  };

  const landingHeaderColorObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      const { isIntersecting } = entry;

      if (isIntersecting) {
        const color = entry.target.getAttribute("data-landing-header-color");
        landingHeaderElement.style.color = color;
      }
    });
  }, landingHeaderObserverOptions);

  const landingHeaderSectionElements = document.querySelectorAll(
    ".landing-header-section"
  );
  landingHeaderSectionElements.forEach((section) => {
    landingHeaderColorObserver.observe(section);
  });
</script>

<script>
  const heroContentElements = document.querySelectorAll(".hero-content");

  const heroObserverOptions = {
    root: null,
    rootMargin: "0px",
    threshold: 0.8,
  };

  const heroTransitionObserver = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      const { isIntersecting } = entry;

      if (isIntersecting) {
        entry.target.classList.remove("opacity-0");
        entry.target.classList.add("opacity-100");
      } else {
        entry.target.classList.remove("opacity-100");
        entry.target.classList.add("opacity-0");
      }
    });
  }, heroObserverOptions);

  heroContentElements.forEach((element) => {
    heroTransitionObserver.observe(element);
  });
</script>
